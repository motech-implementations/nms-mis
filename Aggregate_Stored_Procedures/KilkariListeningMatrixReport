CREATE DEFINER=`etluser`@`%` PROCEDURE `KilkariListeningMatrixReport`()
BEGIN
DECLARE dt DATETIME;
DECLARE i INT;
SET dt = (select cast(last_etl_time as datetime) from KilkariAgg.ETL_info_table where table_id = 51);
SET i = 1;
WHILE i<2 DO
SET i=i+1;

truncate table KilkariAgg.agg_kilkari_listening_matrix_temp;

insert into KilkariAgg.agg_kilkari_listening_matrix_temp (state_id, district_id, healthBlock_id, date, calls_listened_percentage, contentListened_morethan75, contentListened_50_75, contentListened_25_50, contentListened_lessthan25)
select b.state_id, b.district_id, b.healthBlock_id, dt as date, 'callsListened_morethan75' as calls_listened_percentage, COUNT(distinct case when a.percentageListened >= 75 THEN a.beneficiaryTracking_id END) as morethan75, COUNT(distinct case when (a.percentageListened >= 50 or a.percentageListened <75) THEN a.beneficiaryTracking_id END) as 50and75, COUNT(distinct case when (a.percentageListened >=25 or a.percentageListened <50) THEN a.beneficiaryTracking_id END) as 25and50, COUNT(distinct case when a.percentageListened < 25 THEN a.beneficiaryTracking_id END) as lessthan25 from (select DISTINCT beneficiaryTracking_id, SUM(percentage_listened)/count(case when call_status='SUCCESS' THEN id END) as percentageListened from beneficiary_call_measure where call_source='OBD' and modificationdate between dt and DATE_ADD(dt, INTERVAL 1 MONTH) and beneficiaryTracking_id is not null group by beneficiaryTracking_id having ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) >=75 ) as a LEFT JOIN beneficiary_tracker b on b.id=a.beneficiaryTracking_id group by b.state_id, b.district_id, b.healthBlock_id

UNION ALL
select b.state_id, b.district_id, b.healthBlock_id, dt as date, 'callsListened_50_75' as calls_listened_percentage, COUNT(distinct case when a.percentageListened >= 75 THEN a.beneficiaryTracking_id END) as morethan75, COUNT(distinct case when (a.percentageListened >= 50 or a.percentageListened <75) THEN a.beneficiaryTracking_id END) as 50and75, COUNT(distinct case when (a.percentageListened >=25 or a.percentageListened <50) THEN a.beneficiaryTracking_id END) as 25and50, COUNT(distinct case when a.percentageListened < 25 THEN a.beneficiaryTracking_id END) as lessthan25 from (select DISTINCT beneficiaryTracking_id, SUM(percentage_listened)/count(case when call_status='SUCCESS' THEN id END) as percentageListened from beneficiary_call_measure where call_source='OBD' and modificationdate between dt and DATE_ADD(dt, INTERVAL 1 MONTH) and beneficiaryTracking_id is not null group by beneficiaryTracking_id having (ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) >=50 or ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) <75)) as a LEFT JOIN beneficiary_tracker b on b.id=a.beneficiaryTracking_id group by b.state_id, b.district_id, b.healthBlock_id

UNION ALL
select b.state_id, b.district_id, b.healthBlock_id, dt as date, 'callsListened_25_50' as calls_listened_percentage, COUNT(distinct case when a.percentageListened >= 75 THEN a.beneficiaryTracking_id END) as morethan75, COUNT(distinct case when (a.percentageListened >= 50 or a.percentageListened <75) THEN a.beneficiaryTracking_id END) as 50and75, COUNT(distinct case when (a.percentageListened >=25 or a.percentageListened <50) THEN a.beneficiaryTracking_id END) as 25and50, COUNT(distinct case when a.percentageListened < 25 THEN a.beneficiaryTracking_id END) as lessthan25 from (select DISTINCT beneficiaryTracking_id, SUM(percentage_listened)/count(case when call_status='SUCCESS' THEN id END) as percentageListened from beneficiary_call_measure where call_source='OBD' and modificationdate between dt and DATE_ADD(dt, INTERVAL 1 MONTH) and beneficiaryTracking_id is not null group by beneficiaryTracking_id having (ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) >=25 or ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) <50)) as a LEFT JOIN beneficiary_tracker b on b.id=a.beneficiaryTracking_id group by b.state_id, b.district_id, b.healthBlock_id

UNION ALL
select b.state_id, b.district_id, b.healthBlock_id, dt as date, 'callsListened_lessthan75' as calls_listened_percentage, COUNT(distinct case when a.percentageListened >= 75 THEN a.beneficiaryTracking_id END) as morethan75, COUNT(distinct case when (a.percentageListened >= 50 or a.percentageListened <75) THEN a.beneficiaryTracking_id END) as 50and75, COUNT(distinct case when (a.percentageListened >=25 or a.percentageListened <50) THEN a.beneficiaryTracking_id END) as 25and50, COUNT(distinct case when a.percentageListened < 25 THEN a.beneficiaryTracking_id END) as lessthan25 from (select DISTINCT beneficiaryTracking_id, SUM(percentage_listened)/count(case when call_status='SUCCESS' THEN id END) as percentageListened from beneficiary_call_measure where call_source='OBD' and modificationdate between dt and DATE_ADD(dt, INTERVAL 1 MONTH) and beneficiaryTracking_id is not null group by beneficiaryTracking_id having ROUND((count(distinct case when call_status='SUCCESS' then campaign_id end)/count(distinct campaign_id))*100, 2) <25 ) as a LEFT JOIN beneficiary_tracker b on b.id=a.beneficiaryTracking_id group by b.state_id, b.district_id, b.healthBlock_id;


insert into KilkariAgg.agg_kilkari_listening_matrix (location_type, location_id, date, calls_listened_percentage, contentListened_morethan75, contentListened_50_75, contentListened_25_50, contentListened_lessthan25)
select 'NATIONAL' as location_type, '0' as location_id, date as date, calls_listened_percentage, SUM(contentListened_morethan75), SUM(contentListened_50_75), SUM(contentListened_25_50), SUM(contentListened_lessthan25) from KilkariAgg.agg_kilkari_listening_matrix_temp group by calls_listened_percentage

UNION ALL
select 'STATE' as location_type, state_id as location_id, date as date, calls_listened_percentage, SUM(contentListened_morethan75), SUM(contentListened_50_75), SUM(contentListened_25_50), SUM(contentListened_lessthan25) from KilkariAgg.agg_kilkari_listening_matrix_temp group by state_id, calls_listened_percentage

UNION ALL
select 'DISTRICT' as location_type, district_id as location_id, date as date, calls_listened_percentage, SUM(contentListened_morethan75), SUM(contentListened_50_75), SUM(contentListened_25_50), SUM(contentListened_lessthan25) from KilkariAgg.agg_kilkari_listening_matrix_temp group by district_id, calls_listened_percentage

UNION ALL
select 'BLOCK' as location_type, healthBlock_id as location_id, date as date, calls_listened_percentage, SUM(contentListened_morethan75), SUM(contentListened_50_75), SUM(contentListened_25_50), SUM(contentListened_lessthan25) from KilkariAgg.agg_kilkari_listening_matrix_temp group by healthBlock_id, calls_listened_percentage;

SET dt = DATE_ADD(dt, INTERVAL 1 MONTH);
update KilkariAgg.ETL_info_table set last_etl_time = dt where table_id = 51;

END WHILE;

END
